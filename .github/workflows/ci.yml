name: 🚀 Hahow Quality Engineer - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2點執行測試
    - cron: '0 2 * * *'

jobs:
  # API 自動化測試
  api-tests:
    name: 🔌 API 自動化測試
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      
    - name: 🐍 設定 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: 📦 安裝 API 測試依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 執行 API 測試
      run: |
        echo "開始執行 API 自動化測試..."
        python api_automation.py
        
    - name: 📁 準備報告目錄 (API)
      run: |
        mkdir -p reports
        
    - name: 📊 執行 pytest API 測試套件
      run: |
        pytest api_automation.py -v --tb=short
        
    - name: 📄 生成 API 測試報告
      run: |
        pytest api_automation.py --html=reports/api_report.html --self-contained-html
        
    - name: 📤 上傳 API 測試報告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-report
        path: reports/api_report.html

  # UI 自動化測試
  ui-tests:
    name: 🖥️ UI 自動化測試
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      
    - name: 🐍 設定 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: 🌐 安裝 Chrome 瀏覽器
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
        
    - name: 📦 安裝 UI 測試依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r ui_requirements.txt
        
    - name: 📁 準備測試目錄 (UI)
      run: |
        mkdir -p reports screenshots logs
        
    - name: 🔧 設定測試環境
      run: |
        python setup_environment.py
        
    - name: 🧪 執行 UI 測試
      env:
        CHROME_BIN: google-chrome
      run: |
        echo "開始執行 UI 自動化測試..."
        python ui_automation.py
        
    - name: 📊 執行 pytest UI 測試套件
      run: |
        pytest ui_automation.py -v --tb=short
        
    - name: 📄 生成 UI 測試報告
      run: |
        pytest ui_automation.py --html=reports/ui_report.html --self-contained-html
        
    - name: 📤 上傳 UI 測試報告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ui-test-report
        path: reports/ui_report.html
        
    - name: 📸 上傳測試截圖
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ui-screenshots
        path: screenshots/

  # 整合測試
  integration-tests:
    name: 🔗 整合測試
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      
    - name: 🐍 設定 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: 📦 安裝所有依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r ui_requirements.txt
        
    - name: 🌐 安裝 Chrome 瀏覽器
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
        
    - name: 📁 準備測試目錄 (整合)
      run: |
        mkdir -p reports screenshots logs
        
    - name: 🔧 設定測試環境
      run: |
        python setup_environment.py
        
    - name: 🚀 執行完整測試套件
      run: |
        echo "開始執行完整測試套件..."
        ./run_ui_tests.sh
        
    - name: 📊 生成整合測試報告
      run: |
        pytest api_automation.py ui_automation.py --html=reports/integration_report.html --self-contained-html
        
    - name: 📤 上傳整合測試報告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-report
        path: reports/integration_report.html

  # 程式碼品質檢查
  code-quality:
    name: 🔍 程式碼品質檢查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      
    - name: 🐍 設定 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: 📦 安裝品質檢查工具
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
        pip install -r ui_requirements.txt
        
    - name: 🎨 檢查程式碼格式 (Black)
      run: |
        black --check --diff .
        
    - name: 📋 檢查 import 排序 (isort)
      run: |
        isort --check-only --diff .
        
    - name: 🔍 檢查程式碼風格 (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🏷️ 類型檢查 (MyPy)
      run: |
        mypy . --ignore-missing-imports

  # 測試覆蓋率
  coverage:
    name: 📊 測試覆蓋率
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      
    - name: 🐍 設定 Python 環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: 📦 安裝依賴
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r ui_requirements.txt
        pip install coverage pytest-cov
        
    - name: 📊 執行覆蓋率測試
      run: |
        pytest api_automation.py ui_automation.py --cov=. --cov-report=xml --cov-report=html
        
    - name: 📤 上傳覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 📤 上傳覆蓋率 HTML 報告
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # 部署測試報告
  deploy-reports:
    name: 🚀 部署測試報告
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 檢出代碼
      uses: actions/checkout@v4
      
    - name: 📥 下載所有測試報告
      uses: actions/download-artifact@v3
      with:
        path: reports/
        
    - name: 🌐 部署到 GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./reports
        destination_dir: reports
